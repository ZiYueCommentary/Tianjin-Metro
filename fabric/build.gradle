import org.mtr.mod.BuildTools

plugins {
    id 'fabric-loom' version '+'
}

final BuildTools buildTools = new BuildTools(minecraft_version, "fabric", mtr_version, project)

loom {
    runConfigs.configureEach { ideConfigGenerated = true }
    mixin {
        setDefaultRefmapName("tjmetro.refmap.json")
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
    String FabricVersion = buildTools.getFabricVersion()
    modImplementation "net.fabricmc:fabric-loader:${FabricVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
    //modImplementation(files("E:\\Tianjin-Metro\\libs\\MTR-fabric-4.0.0-beta-8+1.16.5-server.jar"))
    modApi "com.terraformersmc:modmenu:${buildTools.getModMenuVersion()}"
    modApi("ziyue.filters:filters-fabric:1.0.0+${minecraft_version}") {
        exclude(group: "net.fabricmc")
    }
    // Uncomment this if you got "java.lang.IllegalStateException: duplicate fabric loader classes found on classpath".
    configurations.configureEach {
        resolutionStrategy {
            force("net.fabricmc:fabric-loader:${FabricVersion}")
        }
    }
    modImplementation "org.mtr:MTR-fabric:${mtr_version}+${minecraft_version}-server"
    annotationProcessor 'systems.manifold:manifold-preprocessor:+'
    // Delibrate: Newer versions just throws an error *when displaying an compiling error*
}

repositories {
    maven { url = "https://maven.terraformersmc.com/" }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
}