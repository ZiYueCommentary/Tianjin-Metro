import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
    id "de.undercouch.download" version "4.1.2"
    id "com.github.johnrengelman.shadow" version "7.1.0" apply false
}

def default_minecraft_version = "1.16.5"
def minecraft_version = project.properties.containsKey("buildVersion") ? project.getProperties().get("buildVersion") : default_minecraft_version
def minecraft_main_version = minecraft_version.split("\\.")[1] as int
def minecraft_mod_api_tools_version = new JsonSlurper().parse(("https://api.github.com/repos/jonafanho/Minecraft-Mod-API-Tools/git/refs/heads/master").toURL())["object"]["sha"]

rootProject.ext.fabric_loader_version = new JsonSlurper().parse(("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version).toURL())[0]["loader"]["version"]
rootProject.ext.forge_version = minecraft_version + "-" + new JsonSlurper().parse(("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json").toURL())["promos"][minecraft_version + "-latest"]
rootProject.ext.fabric_api_version = getModrinthVersion("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_version = getModrinthVersion("fabric", minecraft_version, "modmenu")
rootProject.ext.cloth_config_fabric_version = getModrinthVersion("fabric", minecraft_version, "cloth-config")
rootProject.ext.cloth_config_forge_version = getModrinthVersion("forge", minecraft_version, "cloth-config")
rootProject.ext.filters_api_version = getModrinthVersion("fabric", minecraft_version, "filters-api")
rootProject.ext.architectury_version = getModrinthVersion("forge", minecraft_version, "architectury-api").split("\\+")[0]
rootProject.ext.architectury_id = minecraft_main_version == 16 ? "me.shedaniel" : "dev.architectury"

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()

        mixin {
            defaultRefmapName.set("tjmetro-refmap.json")
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.officialMojangMappings()
        implementation files("../checkouts/mtr-common.jar")
        implementation "com.github.jonafanho:Minecraft-Mod-API-Tools:${minecraft_mod_api_tools_version}"
        implementation 'org.codehaus.groovy:groovy-json:3.0.9'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }
}

task setupLibrary() {
    doLast {
        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-common-${minecraft_version}-${rootProject.mtr_version}-dev.jar"
            dest "checkouts/mtr-common.jar"
            overwrite true
        }

        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-fabric-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "checkouts/mtr-fabric.jar"
            overwrite true
        }

        download {
            src "https://www.minecrafttransitrailway.com/libs/${rootProject.mtr_version}/MTR-forge-${minecraft_version}-${rootProject.mtr_version}-dev-shadow.jar"
            dest "checkouts/mtr-forge.jar"
            overwrite true
        }
    }
}

task setupFiles() {
    System.out.println("Fabric Loader: " + rootProject.fabric_loader_version)
    System.out.println("Forge: " + rootProject.forge_version)
    System.out.println("Fabric API: " + rootProject.fabric_api_version)
    System.out.println("Mod Menu: " + rootProject.mod_menu_version)
    System.out.println("Architectury: " + rootProject.architectury_version)
    System.out.println("Filters API: " + rootProject.filters_api_version)

//    download {
//        src "https://weblate.ziyuesinicization.site/api/components/tianjin-metro/en-us-json/file/"
//        dest "lang.zip"
//        overwrite true
//        retries -1
//    }
//    copy {
//        outputs.upToDateWhen { false }
//        from(zipTree("lang.zip"))
//        into "temp_lang"
//    }
//    copy {
//        outputs.upToDateWhen { false }
//        from "temp_lang/tianjin-metro/en-us-json/"
//        into "/"
//    }
//    delete("lang.zip", "temp_lang")

    copy {
        outputs.upToDateWhen { false }
        from "checkouts/mtr-fabric.jar"
        into "fabric/run/mods"
    }

    copy {
        outputs.upToDateWhen { false }
        from "checkouts/mtr-forge.jar"
        into "forge/run/mods"
    }

    copy {
        outputs.upToDateWhen { false }
        from "common/src/main/latest-tjmetro.json"
        into "build/latest"
        filter(ReplaceTokens, tokens: ["version": rootProject.mod_version])
    }
}

allprojects {
    apply plugin: "architectury-plugin"

    version = minecraft_version + "-" + project.mod_version
    group = project.maven_group

    repositories {
        maven { url = "https://jitpack.io/" }
        maven { url = "https://maven.terraformersmc.com/" }
        maven { url = "https://maven.shedaniel.me/" }
        maven { url = "https://maven.ziyuesinicization.site/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        if (minecraft_main_version == 16) {
            def targetVersion = 16
            if (JavaVersion.current().isJava9Compatible()) {
                options.release = targetVersion
            }
        } else if (minecraft_main_version == 17) {
            options.release = 16
        } else {
            options.release = 17
        }
    }

    afterEvaluate {
        for (def task in it.tasks) {
            if (task != rootProject.tasks.setupFiles) {
                task.dependsOn rootProject.tasks.setupFiles
            }
        }
    }
}

static def getModrinthVersion(loader, minecraftVersion, projectId) {
    def versionsArray = new JsonSlurper().parse(("https://api.modrinth.com/v2/project/" + projectId + "/version").toURL())
    for (def versionElement : versionsArray) {
        if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
            return versionElement["version_number"]
        }
    }
    return ""
}